<%=

  def is_boolean(x)
    !!x == x
  end

  credhub_conf_dir = '/var/vcap/jobs/credhub/config'

  application_config = {}

  ciphers = 'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384'

  # if_p('credhub.java7_tls_ciphers_enabled') do |enabled|
  #   if enabled
  #     ciphers += ',TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA'
  #   end
  # end

  # # Server TLS Config
  # server_config = {
  #   'port' => p('credhub.port'),
  #   'ssl' => {
  #     'enabled' => true,
  #     'key_store' => "#{credhub_conf_dir}/cacerts.jks",
  #     'key_password' => 'KEY_STORE_PASSWORD_PLACEHOLDER',
  #     'key_alias' => 'credhub_tls_cert',
  #     'ciphers' => ciphers,
  #     'enabled_protocols' => 'TLSv1.2'
  #   }
  # }

  # # mTLS Config
  # if_p('credhub.authentication.mutual_tls.trusted_cas') do |cas|
  #   unless cas.to_a.empty?
  #     server_config['ssl']['client_auth'] = 'want'
  #     server_config['ssl']['trust_store'] = "#{credhub_conf_dir}/mtls_trust_store.jks"
  #     server_config['ssl']['trust_store_password'] = 'MTLS_TRUST_STORE_PASSWORD_PLACEHOLDER'
  #     server_config['ssl']['trust_store_type'] = 'JKS'
  #   end
  # end

  # application_config['server'] = server_config

  application_config['security'] = {}

  # if p("credhub.authentication.uaa.enabled")
  #     # Security Config
  #     application_config['security'] = {
  #       'oauth2' => {
  #         'enabled' => true
  #       }
  #     }
      # Auth Server
      # application_config['auth_server'] = {
      #   'url' => p('credhub.authentication.uaa.url'),
      #   'trust_store' => "#{credhub_conf_dir}/trust_store.jks",
      #   'trust_store_password' => 'TRUST_STORE_PASSWORD_PLACEHOLDER'
      # }

      # if_p('credhub.authentication.uaa.internal_url') do |internal_url|
      #   application_config['auth_server']['internal_url'] = internal_url
      # end
  # end

  # acls_enabled = false
  # if_p('credhub.authorization.acls.enabled') do |are_acls_enabled|
  #   acls_enabled = are_acls_enabled
  # end

  # application_config['security']['authorization'] = {
  #   'acls' => {
  #     'enabled' => acls_enabled
  #   }
  # }


  # Database Config
  # application_config['spring'] = {
  #   'jpa' => {
  #     'hibernate' => {
  #       'ddl_auto' => 'validate'
  #     }
  #   }
  # }

  # flyway_locations = ['classpath:/db/migration/common']

  # datastorage_type = p('credhub.data_storage.type')
  #
  # if datastorage_type == 'in-memory'
  #   flyway_locations << 'classpath:/db/migration/h2'
  # elsif datastorage_type == 'postgres' || datastorage_type == 'mysql'
  #   db_params = ['host', 'port', 'database']
  #     .map {|name| "credhub.data_storage.#{name}"}
  #     .map {|property| p(property)}
  #   jdbc_driver = datastorage_type == 'postgres' ? 'postgresql' : 'mariadb'
  #   db_params.unshift(jdbc_driver)
  #   connection_url = sprintf 'jdbc:%s://%s:%s/%s?autoReconnect=true', *db_params
  #
  #   if_p('credhub.data_storage.require_tls') do |require_tls|
  #     if !is_boolean(require_tls)
  #       raise 'credhub.data_storage.require_tls must be set to `true` or `false`.'
  #     end
  #
  #     if require_tls
  #       if datastorage_type == 'mysql'
  #         connection_url << '&useSSL=true&requireSSL=true&verifyServerCertificate=true' if require_tls
  #         connection_url << '&enabledSslProtocolSuites=TLSv1,TLSv1.1,TLSv1.2'
  #         connection_url << '&trustCertificateKeyStorePassword=TRUST_STORE_PASSWORD_PLACEHOLDER'
  #         connection_url << "&trustCertificateKeyStoreUrl=#{credhub_conf_dir}/trust_store.jks"
  #       elsif datastorage_type == 'postgres'
  #         connection_url << '&ssl=true' if require_tls
  #       end
  #     end
  #   end
  #
  #   application_config['spring']['datasource'] = {
  #     'username' => p('credhub.data_storage.username'),
  #     'password' => p('credhub.data_storage.password'),
  #     'url' => connection_url
  #   }
  #
  #   flyway_locations << "classpath:/db/migration/#{datastorage_type}"
  # else
  #   raise 'credhub.data_storage.type must be set to "mysql", "postgres", or "in-memory".'
  # end

  # application_config['flyway'] = {
  #   'locations' => flyway_locations,
  #   'enabled' => !!spec.bootstrap
  # }

  # Encryption Config
  #
  # encryption_keys = p('credhub.encryption.keys').to_a
  # encryption_providers = p('credhub.encryption.providers').to_a
  # active_keys = encryption_keys.select {|key| key['active']}
  #
  # if active_keys.empty? || active_keys.size > 1
  #   raise 'Exactly one encryption key must be marked as active in the deployment manifest. Please update your configuration to proceed.'
  # end
  #
  # provider_types = encryption_providers.collect{|p| p['type']}.uniq
  #
  # if provider_types.any? { |p| !['internal', 'hsm'].include?(p) }
  #   raise 'The provided encryption provider type is not valid. Valid provider types are "hsm" and "internal".'
  # end
  #
  # hsm_providers = encryption_providers.select{|p| p['type'] == 'hsm'}
  #
  # if hsm_providers.size > 1
  #   raise 'More than one hsm provider is not supported. Please update your configuration to proceed.'
  # end
  #
  # keys = encryption_keys.each do |k|
  #   provider = encryption_providers.detect {|p| p['name'] == k['provider_name'] }
  #   k['provider_type'] = provider['type']
  #   k.delete 'provider_name'
  #
  #   if k.key?('encryption_password')
  #     if k['encryption_password'].nil? || k['encryption_password'].empty?
  #       raise 'credhub.encryption.encryption_password is not valid (must not be empty if provided).'
  #     end
  #
  #     if k['encryption_password'].length < 20
  #       raise 'The encryption_password value must be at least 20 characters in length. Please update and redeploy.'
  #     end
  #   end
  #
  #   if k.key?('dev_key')
  #     raise 'The key `dev_key` is not supported. You must rotate to using an `encryption_password` prior to upgrading to this version.'
  #   end
  # end

  # application_config['encryption'] = {
  #   'keys' => keys,
  #   'key_creation_enabled' => !!spec.bootstrap
  # }


  # if hsm_providers.any?
  #   hsm_provider = hsm_providers.first
  #   if hsm_provider.has_key?('connection_properties')
  #     hsm_provider = hsm_provider['connection_properties']
  #   end
  #   application_config['hsm'] = {
  #     'partition' => hsm_provider['partition'],
  #     'partition_password' => hsm_provider['partition_password']
  #   }
  # end

  # # Logging Config
  # application_config['logging'] = {
  #   'config' => "#{credhub_conf_dir}/log4j2.properties"
  # }

  application_config.to_yaml
%>
